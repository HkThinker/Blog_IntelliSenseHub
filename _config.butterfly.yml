# Hexo Configuration
## Docs: https://hexo.io/docs/configuration.html
## Source: https://github.com/hexojs/hexo/

# Site
title: IntelliSenseHub # 网站标题
subtitle: 'OSTIS Blockchain IoT NNmodel' # 网站副标题
description: '这里是IntelliSenseHub的博客，探索区块链、物联网和神经网络模型的最新动态。' # 网站描述
keywords: 区块链, 物联网, 神经网络, IntelliSenseHub # 网站关键词
author: Xia yiwei # 网站作者
language: zh-CN # 网站语言
timezone: 'Europe/Minsk' # 时区设置

# URL
## 设置您的站点 URL。例如，如果您使用 GitHub Pages，请设置 URL 为 'https://username.github.io/project'
url: http://example.com # 网站 URL
permalink: :year/:month/:day/:title/ # 网站永久链接格式
permalink_defaults: # 永久链接默认设置
pretty_urls: # 美化链接设置
  trailing_index: true # 是否在首页链接后添加 'index.html'
  trailing_html: true # 是否在链接后添加 '.html'

# 目录
source_dir: source # 源文件目录
public_dir: public # 静态文件输出目录
tag_dir: tags # 标签页面目录
archive_dir: archives # 归档页面目录
category_dir: categories # 分类页面目录
code_dir: downloads/code # 代码文件下载目录
i18n_dir: :lang # 国际化目录
skip_render: # 跳过渲染的文件设置
   - about/**  # 表示blog-LeadPage文件里面的内容不会被站点渲染
# 写作
new_post_name: :title.md # 新文章的文件名格式
default_layout: post # 默认文章布局
titlecase: false # 标题是否使用标题格式（每个单词首字母大写）
external_link: # 外部链接设置
  enable: true # 是否在新标签页中打开外部链接
  field: site # 应用于整个站点的设置
  exclude: '' # 排除的链接

filename_case: 0
render_drafts: false # 是否渲染草稿
post_asset_folder: false  # 是否启用文章资源文件夹。如果设置为 true，则 Hexo 将为每篇文章创建一个独立的资源文件夹，用于存储与文章相关的资源文件（如图片）。如果设置为 false，则资源将存储在全局资源文件夹中。
relative_link: false  # 是否使用相对链接。如果设置为 true，则 Hexo 将生成相对链接而不是绝对链接，适用于将博客部署到子目录或不同域的情况。
future: true  # 是否允许将未来日期的文章生成到网站中。如果设置为 true，则即使文章的日期在当前日期之后，仍然会生成和显示这些文章。
syntax_highlighter: highlight.js  # 代码语法高亮器的选择。可以选择 'highlight.js' 或其他支持的语法高亮器。

highlight:
  line_number: true  # 是否显示代码行号。如果设置为 true，则显示代码块中的行号。
  auto_detect: false  # 是否自动检测代码块的语言。如果设置为 true，则尝试自动检测代码块的语言。
  tab_replace: ''  # 指定代码块中的制表符替换字符。通常用于控制代码块的缩进。
  wrap: true  # 是否自动包装代码块。如果设置为 true，则自动将代码块包装在 <pre> 和 <code> 标签中，以进行格式化显示。
  hljs: false  # 是否使用 Highlight.js 进行代码高亮。如果设置为 true，则启用 Highlight.js 进行代码高亮，而不是使用默认的 Prism.js。
  
prismjs:
  preprocess: true  # 是否在 Prism.js 渲染之前进行预处理。如果设置为 true，则允许 Prism.js 渲染之前进行预处理。
  line_number: true  # 是否显示代码行号。如果设置为 true，则显示代码块中的行号。
  tab_replace: ''  # 指定代码块中的制表符替换字符。通常用于控制代码块的缩进。


# 首页设置
index_generator:
  path: '' # 首页路径
  per_page: 10 # 每页显示的文章数
  order_by: -date # 文章排序方式（按日期降序）

# 分类和标签
default_category: uncategorized # 默认分类
category_map: # 分类映射
tag_map: # 标签映射

# Metadata elements
## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta
meta_generator: true

# Date / Time format
## Hexo uses Moment.js to parse and display date
## You can customize the date format as defined in
## http://momentjs.com/docs/#/displaying/format/
date_format: YYYY-MM-DD
time_format: HH:mm:ss
## updated_option supports 'mtime', 'date', 'empty'
updated_option: 'mtime'

# Pagination
## Set per_page to 0 to disable pagination
per_page: 10
pagination_dir: page

# Include / Exclude file(s)
## include:/exclude: options only apply to the 'source/' folder
include:
exclude:
ignore:

# Extensions
## Plugins: https://hexo.io/plugins/
## Themes: https://hexo.io/themes/
theme: butterfly

# Deployment
## Docs: https://hexo.io/docs/one-command-deployment
deploy: 
  type: git 
  repo: https://github.com/HkThinker/HkThinker.github.io
  branch: gh-pages


## 参考链接
# https://hexo.io/zh-cn/docs/github-pages#%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2  

## 准备工作: 连接GitHub,要配置好GitHub账号的ssh 


# 在Hexo中发布一篇博客文章通常需要以下步骤：

# 1. 创建一篇新博客文章：
#    使用Hexo的命令行工具创建一篇新的博客文章。在终端中导航到您的Hexo博客目录，然后运行以下命令来创建新文章：

#    ```
#    hexo new "文章标题"
#    ```

#    这将在Hexo的`source/_posts`目录下创建一个以Markdown格式编写的新文章文件，文件名通常以日期和文章标题命名。

# 2. 编辑博客文章：
#    打开刚创建的Markdown文件，并在其中编写博客内容。您可以使用Markdown语法来格式化文本、添加图片、链接等。

# 3. 保存博客文章：
#    在编辑完成后，保存Markdown文件。

# 4. 生成静态网站文件：
#    在Hexo博客目录中，运行以下命令来生成静态网站文件：

#    ```
#    hexo generate
#    ```

#    这将会将您的博客文章编译为HTML文件，并将其放置在`public`目录下。

# 5. 预览博客文章（可选）：
#    您可以使用Hexo提供的本地服务器来预览您的博客文章。运行以下命令来启动本地服务器：

#    ```
#    hexo server
#    ```

#    然后在浏览器中访问`http://localhost:4000`以查看您的博客文章。

# 6. 部署博客文章：
#    一旦满意，您可以使用Hexo将博客文章部署到您的博客托管平台（例如GitHub Pages）。首先，确保您的博客配置文件中包含正确的部署设置。然后运行以下命令：

#    ```
#    hexo deploy
#    ```

#    这将把生成的静态文件上传到您的托管平台。

# 7. 查看已发布文章：
#    访问您的博客网站，查看已发布的文章。

# 这是发布一篇博客文章的基本流程。您可以根据需要自定义Hexo博客的主题、插件和配置，以满足您的需求。记住在每个步骤完成后保存文件和提交更改，以确保您的工作不会丢失。

